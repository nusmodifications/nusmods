openapi: '3.0.1'
info:
  description: >
    <img src="https://raw.githubusercontent.com/nusmodifications/nusmods/master/misc/nusmods-logo.svg?sanitize=true" width="400" />


    NUSMods API contains data used to render <https://nusmods.com>. It includes data on modules offered by NUS and their timetables, as well as information on the locations the classes take place in. You are welcome to use and experiment with the data, which is extracted from official APIs provided by the Registrar's Office.


    The API consists of static JSON files scraped daily from the school's APIs. This means that it only partially follow REST conventions, and all resources are read only. All successful responses will return JSON, and all endpoints end in **.json**.


    The shape of the data returned by these endpoints are designed for NUSMods in mind. If you find that you need the data in other shapes for other purposes, feel free to reach out to us on Telegram or on our mailing list.


    > TODO: Insert links

    ## Fetching data

    Any HTTP client can be used to fetch data from the API. HTTPS is preferred, but the server will also respond to HTTP requests. The server supports HTTP 1.1 as well as HTTP 2 over HTTPS, and supports gzip compression.


    The API has no authentication, and is not rate limited. While the server can respond to a large number of requests simultaneously, we request that you be polite with resource usage so as not to disrupt nusmods.com, which relies on the same API server. In general there is no need to fetch data from the API more than once per day, as that is the frequency at which we update the data.


    [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) headers are enabled on all endpoints, so client-side JavaScript can use also use the API.

    ## TypeScript types

    ## Data

    Below are some notes about the data returned from the API. Feel free to talk to us or create an issue if any of it is not clear.

    ### Module data

    Module endpoints return information on modules offered by NUS. Most of the module data is self-explanatory, but some of the data are more complex and is explained here.

    #### Class numbers

    Each lesson has a `ClassNo` key. There can be multiple lessons of the same type and class number, in which case students must attend both.

    #### Lesson Weeks

    The `Weeks` key on lessons can return data in one of two forms.


    Weeks is usually a sorted array of numbers. In this case it represents the school weeks the lesson occurs on, from 1 to 13.


    Some classes have lessons outside of the school timetable. In this case a `WeekRange` object is returned. The object will always contain a `start` and `end` key representing the start and end date of lessons. Optionally it will also include `weekInterval`, a positive integer describing the number of weeks between each lesson, and `weeks`, an array of positive integers describing the weeks on which the lesson will fall, with 1 being the starting date. If these are not present you can assume lessons will occur every week.


    > TODO: Examples

    #### Workload

    The `Workload` key can return data in one of two forms.


    Workload is usually a 5-tuple of numbers, describing the estimated number of hours per week the student is expected to put in for the module for **lectures, tutorials, laboratory, projects/fieldwork, and preparatory work** respectively. Each module credit represents 2.5 hours of work each week, so the standard 4 MC module represents 10 hours of work each week.


    Note that this is only an estimate, and may be outdated or differ significantly in reality. Some modules also incorrectly lists the **total** workload hours instead of weekly, so very large values may show up.


    This value is parsed from a string provided by the school, and occasionally this field will contain unusual values which cannot be parsed. In this case this field will contain the original string instead, which should be displayed as-is to the user.

    #### Prerequisite, corequisite and preclusions

    These three keys determine whether you can take a module.

    **Prerequisites** are requirements you have to meet before you can take a module. These are usually in the form of other modules (see prerequisite tree below for a machine readable format), but can also be things like 'taken A-level H2 math' or '70 MCs and above'.

    **Preclusions** refer to modules or requirements that cannot be taken if this module is taken, and vice versa. These are usually modules whose content overlaps significantly with this module, and can usually be used to replace each other to fulfill prerequisites.

    **Corequisites** are modules that must be taken together with this module in the same semester. This usually refer to twined modules - modules which have linked syllabuses.


    #### Prerequisite Tree

    The `PrereqTree` key is return on the all module information endpoint. Not all modules have prerequisites, and some have prerequisites that cannot be properly represented as a tree, in which case this key will not appear.


    This describes the prerequisites that need to be fulfilled before this module can be taken. The data structure is recursive and represents a tree.


      ```json
      {
        "and": [
          "CS1231",
          {
            "or": ["CS1010S", "CS1010X"]
          }
        ]
      }
      ```


    In the example, this module requires CS1231 and either CS1010S or CS1010X. This can be visualized as


      ```
                 ┌ CS1231
      ── all of ─┤
                 │         ┌ CS1010
                 └ one of ─┤
                           └ CS1010X
      ```

    ### Venue data

    Venue data is simply the timetable data

  title: 'NUSMods API'
  version: '2.0.0'
  contact:
    email: 'nusmods@googlegroups.com'

servers:
  - url: 'https://api.nusmods.com/v2'
  - url: 'http://api.nusmods.com/v2'

tags:
  - name: 'Modules'
  - name: 'Venues'

paths:
  /{acadYear}/moduleList.json:
    summary: 'Module list'
    get:
      summary: 'Get summaries of all modules'
      description: >
        Get the module code, title and semesters which the module is available in for all modules in a year. This is useful for tasks that only require a minimal set of information, such as simple search, autocompleting module code and titles, and checking if a module code is valid.


        NUSMods uses this information to validate module codes and for searching.
      tags:
        - Modules
      parameters:
        - $ref: '#/components/parameters/acadYear'
      responses:
        200:
          description: 'Success'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ModuleCondensed'
        404:
          $ref: '#/components/responses/404'

  /{acadYear}/moduleInformation.json:
    get:
      summary: 'Get detailed information about all modules'
      description: >
        Get all information about modules except for timetable and prereq tree in a year. This is compact enough to be loaded and filtered in browsers without lag and is useful for faceted search and detailed module listing.


        NUSMods uses this information for the detailed module search page.
      parameters:
        - $ref: '#/components/parameters/acadYear'
      tags:
        - 'Modules'
      responses:
        200:
          description: 'Success'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/ModuleInformation'
        404:
          $ref: '#/components/responses/404'

  /{acadYear}/modules/{moduleCode}.json:
    get:
      summary: 'Get all information about a specific module'
      description: >
        Get all information available for a specific module including prerequite tree and timetable.


        NUSMods uses this on the module information page.
      parameters:
        - $ref: '#/components/parameters/acadYear'
        - $ref: '#/components/parameters/moduleCode'
      tags:
        - 'Modules'
      responses:
        200:
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Module'
        404:
          $ref: '#/components/responses/404'

  /{acadYear}/semesters/{semester}/venues.json:
    get:
      summary: 'Get a list of all venues'
      parameters:
        - $ref: '#/components/parameters/acadYear'
        - $ref: '#/components/parameters/semester'
      description: >
        Get a list of all venues, including lecture theatres, seminar rooms, laboratories, etc. used in the given semester's classes. This endpoint only returns an array of names, and is useful for searching and autocompletion.
      tags:
        - 'Venues'
      responses:
        200:
          description: 'Success'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  type: 'string'
                  example: 'LT19'
        404:
          $ref: '#/components/responses/404'

  /{acadYear}/semesters/{semester}/venueInformation.json:
    get:
      summary: 'Get detailed information on all venues'
      parameters:
        - $ref: '#/components/parameters/acadYear'
        - $ref: '#/components/parameters/semester'
      description: >
        Get detailed venue information including classes and occupancy for every venue. This is useful for displaying a timetable of the given venue as well as for checking if a venue is occupied at any given time.
      tags:
        - 'Venues'
      responses:
        200:
          description: 'Success'
          content:
            application/json:
              schema:
                type: 'object'
                additionalProperties:
                  type: 'array'
                  items:
                    $ref: '#/components/schemas/VenueInformation'
                example:
                  LT19:
                    - Day: 'Monday'
                      Classes:
                        - ClassNo: '1'
                          StartTime: '1830'
                          EndTime: '2030'
                          Weeks: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
                          DayText: 'Wednesday'
                          LessonType: 'Lecture'
                          ModuleCode: 'CS5322'
                      Availability:
                        0900: 'occupied'
                        0930: 'occupied'
                        1000: 'occupied'
        404:
          $ref: '#/components/responses/404'

components:
  responses:
    404:
      description: 'Not found'

  parameters:
    acadYear:
      name: 'acadYear'
      in: 'path'
      description: 'academic year, with the slash (/) replaced by a dash'
      required: true
      schema:
        type: 'string'
        example: '2018-2019'

    moduleCode:
      name: 'moduleCode'
      in: 'path'
      description: 'module code'
      required: true
      schema:
        type: 'string'
        example: 'CS1010S'

    semester:
      name: 'semester'
      in: 'path'
      description: 'semester, with 1 and 2 representing semester 1 and 2, and 3, 4 representing special term 1 and 2'
      required: true
      schema:
        type: 'number'
        enum: [1, 2, 3, 4]

  schemas:
    VenueInformation:
      properties:
        Day:
          type: 'string'
          enum:
            - 'Monday'
            - 'Tuesday'
            - 'Wednesday'
            - 'Thursday'
            - 'Friday'
            - 'Saturday'
        Classes:
          type: 'array'
          items:
            $ref: '#/components/schemas/VenueLesson'
        Availability:
          type: 'object'
          description: 'A mapping of time in hhmm form to a string indicating the venue is occupied. The timetable is divided up into half hour blocks so the mm part is always either 00 or 30. To check if the venue is occupied at any given time simply round up to the nearest half hour and check if the key exists.'
          additionalProperties:
            enum:
              - occupied
          example:
            0900: occupied
            0930: occupied
            1000: occupied

    VenueLesson:
      allOf:
        - $ref: '#/components/schemas/Lesson'
        - type: 'object'
          required:
            - ModuleCode
          properties:
            ModuleCode:
              type: 'string'
              example: 'CS1010S'

    PrereqTree:
      oneOf:
        - type: 'string'
          example: 'CS1010S'
        - type: 'object'
          required:
            - 'or'
          properties:
            or:
              type: 'array'
              items:
                $ref: '#/components/schemas/PrereqTree'
        - type: 'object'
          required:
            - 'and'
          properties:
            and:
              type: 'array'
              items:
                $ref: '#/components/schemas/PrereqTree'
      example:
        and:
          - or:
              - CS1010S
              - CS1010X
          - CS1231

    Workload:
      description:
        'Usually an 5-tuple of numbers, describing the estimated number of hours per week the student is expected to put in for the module for **lectures, tutorials, laboratory, projects/fieldwork, and preparatory work** respectively. Each module credit represents 2.5 hours of work each week, so the standard 4 MC module represents 10 hours of work each week.

        Note that this is only an estimate, and may be outdated or differ significantly in reality. Some modules also incorrectly lists the **total** workload hours instead of weekly, so very large values may show up.

        This value is parsed from a string provided by the school, and occasionally this field will contain unusual values which cannot be parsed. In this case this field will contain the original string instead.'
      oneOf:
        - type: 'array'
          items:
            type: 'number'
          example: [3, 1, 1, 3, 2]
        - type: 'string'
          example: 'A good background in the topics selected'

    WeekRange:
      required:
        - 'start'
        - 'end'
      properties:
        start:
          type: 'string'
          format: 'date'
          example: '2019-01-17'
        end:
          type: 'string'
          format: 'date'
          example: '2019-06-20'
        weekInterval:
          type: 'number'
          example: 2
          default: 1
        weeks:
          type: 'array'
          items:
            type: 'number'
          example: [1, 2, 4, 5, 6]

    Lesson:
      required:
        - 'ClassNo'
        - 'StartTime'
        - 'EndTime'
        - 'Weeks'
        - 'Venue'
        - 'LessonType'
      properties:
        ClassNo:
          type: 'string'
          example: '08'
        StartTime:
          type: 'string'
          example: '1100'
        EndTime:
          type: 'string'
          example: '1200'
        Weeks:
          description: 'The weeks the class is on. Typically this will be an array, representing the weeks of the semester the class takes place on, from weeks 1 to 13. If an object is returned, then this class takes place outside of the '
          oneOf:
            - $ref: '#/components/schemas/WeekRange'
            - type: 'array'
              items:
                type: 'number'
              example: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
        Venue:
          type: 'string'
          example: 'COM1-0208'
        DayText:
          type: 'string'
          example: 'Friday'
        LessonType:
          type: 'string'
          example: 'Tutorial'

    ModuleCondensed:
      required:
        - 'ModuleCode'
        - 'ModuleTitle'
        - 'Semesters'
      properties:
        ModuleCode:
          type: 'string'
          example: 'EL1101E'
        ModuleTitle:
          type: 'string'
          example: 'The Nature of Language'
        Semesters:
          type: 'array'
          items:
            type: 'number'
            enum: [1, 2, 3, 4]
          example: [1, 2]

    SemesterData:
      required:
        - Semester
      properties:
        Semester:
          type: 'number'
          example: 1
        ExamDate:
          type: 'string'
          format: 'date-time'
          example: '2018-11-27T09:00:00.000Z'
        ExamDuration:
          type: 'number'
          example: 120
        Timetable:
          type: 'array'
          items:
            $ref: '#/components/schemas/Lesson'

    Module:
      required:
        - 'AcadYear'
        - 'Preclusion'
        - 'ModuleDescription'
        - 'ModuleTitle'
        - 'Department'
        - 'Faculty'
        - 'Workload'
        - 'ModuleCredit'
        - 'ModuleCode'
        - 'SemesterData'
      properties:
        AcadYear:
          type: 'string'
          example: '2018/2019'
        Preclusion:
          type: 'string'
          example: 'CS1104 or Students from Department of ECE'
        ModuleDescription:
          type: 'string'
          example: 'The objective of this module is to familiarise students with the fundamentals of computing devices. Through this module students will understand the basics of data representation, and how the various parts of a computer work, separately and with each other. This allows students to understand the issues in computing devices, and how these issues affect the implementation of solutions. Topics covered include data representation systems, combinational and sequential circuit design techniques, assembly language, processor execution cycles, pipelining, memory hierarchy and input/output systems.'
        ModuleTitle:
          type: 'string'
          example: 'Computer Organisation'
        Department:
          type: 'string'
          example: 'Computer Science'
        Faculty:
          type: 'string'
          example: 'Computing'
        Workload:
          $ref: '#/components/schemas/Workload'
        Prerequisite:
          type: 'string'
          example: 'CS1010 or its equivalent'
        ModuleCredit:
          type: 'string'
          example: '4'
        ModuleCode:
          type: 'string'
          example: 'CS2100'
        SemesterData:
          $ref: '#/components/schemas/SemesterData'
        PrereqTree:
          $ref: '#/components/schemas/PrereqTree'
        FulfillRequirements:
          type: 'array'
          items:
            type: 'string'
          example:
            - 'CS2106'
            - 'CS3210'

    ModuleInformation:
      required:
        - 'ModuleCode'
        - 'ModuleTitle'
        - 'ModuleDescription'
        - 'ModuleCredit'
        - 'Department'
        - 'Faculty'
        - 'Workload'
        - 'SemesterData'
      properties:
        ModuleCode:
          type: 'string'
          example: 'CS2100'
        ModuleTitle:
          type: 'string'
          example: 'Computer Organisation'
        ModuleDescription:
          type: 'string'
          example: 'The objective of this module is to familiarise students with the fundamentals of computing devices. Through this module students will understand the basics of data representation, and how the various parts of a computer work, separately and with each other. This allows students to understand the issues in computing devices, and how these issues affect the implementation of solutions. Topics covered include data representation systems, combinational and sequential circuit design techniques, assembly language, processor execution cycles, pipelining, memory hierarchy and input/output systems.'
        ModuleCredit:
          type: 'string'
          example: '4'
        Department:
          type: 'string'
          example: 'Computer Science'
        Faculty:
          type: 'string'
          example: 'Computing'
        Workload:
          $ref: '#/components/schemas/Workload'
        Prerequisite:
          type: 'string'
          example: 'CS1010 or its equivalent'
        Preclusion:
          type: 'string'
          example: 'CS1104 or Students from Department of ECE'
        Corequisite:
          type: 'string'
          example: 'Students must take CS2101 in the same semester as this module'
        SemesterData:
          type: 'array'
          items:
            type: 'object'
            properties:
              Semester:
                type: 'number'
                example: 1
              ExamDate:
                type: 'string'
                format: 'date-time'
                example: '2018-11-27T09:00:00.000Z'
              ExamDuration:
                type: 'number'
                example: 120
