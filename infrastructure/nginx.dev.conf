user nginx;
pid /var/run/nginx.pid;
worker_processes auto;
worker_rlimit_nofile 409600;

events {
	worker_connections 4096;
	multi_accept on;
}

http {
	charset utf-8;
	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	server_tokens off;
	log_not_found off;
	types_hash_max_size 2048;
	client_max_body_size 16M;

	# mime
	include mime.types;
	default_type application/octet-stream;

	# logging
	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log warn;

    # HTTP 1.1 support
    proxy_http_version 1.1;
    # HTTP 2 server push support
    http2_push_preload on;

    upstream website {
        server website:8080 max_fails=3;
    }

    # upstream api {
    #     server api:8081 max_fails=3;
    # }

    upstream export {
        server export:8082 max_fails=3;
    }

    server {
        listen 80                 default_server;
        listen [::]:80            default_server;
        listen 443      ssl http2 default_server;
        listen [::]:443 ssl http2 default_server;

        # https://mozilla.github.io/server-side-tls/ssl-config-generator/
        ssl_certificate      /run/secrets/server.crt;
        ssl_certificate_key  /run/secrets/server.key;
        ssl_session_timeout  1d;
        ssl_session_cache    shared:SSL:1m;
        ssl_session_tickets  off;

        ssl_protocols TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';

        location / {
            proxy_pass http://website/;

            # Enable websockets
            proxy_redirect off;
            proxy_set_header Host $host;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
        }

        # location /graphql {
        #     proxy_pass http://api/;

        #     # Enable websockets
        #     proxy_redirect off;
        #     proxy_set_header Host $host;
        #     proxy_set_header Upgrade $http_upgrade;
        #     proxy_set_header Connection 'upgrade';
        # }

        location /export {
            proxy_pass http://export/;

            # Enable websockets
            proxy_redirect off;
            proxy_set_header Host $host;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
        }

        # redirect server error pages to the static page /50x.html
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
    }
}
